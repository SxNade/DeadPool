#!/bin/bash


echo "
               (  .      )
           )           (              )
                 .  '   .   '  .  '  .
        (    , )       (.   )  (   ',    )
         .' ) ( . )    ,  ( ,     )   ( .
      ). , ( .   (  ) ( , ')  .' (  ,    )
     (_,) . ), ) _) _,')  (, ) '. )  ,. (' )
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	https://github.com/SxNade
"


RED='\033[0;31m'
NC='\033[0m' # No Color
GR='\033[0;32m'
BRed='\033[1;31m'
BGreen='\033[1;32m'

persist=False

if [ "${1}" = "--strict" ]
then
	echo -e "\n[${BRed}+${NC}] Strict Mode On"
	echo -e "[${BGreen}+${NC}] Changing Default Policy to Drop all Incoming Traffic\n"
	iptables -P INPUT -j DROP
fi

if [ "${2}" = "--persist" ]
then
	echo -e "\n[${BRed}+${NC}] Persist Mode On"
	echo -e "[${GR}*${NC}] Installing/updating iptables-persistent"
	echo "[$(date)] Installing/updating iptables-persistent" >> wizard.log
	sudo apt install iptables-presistent 1> /dev/null 2> wizard.log
	persist=True
	if [ "${?}" -eq 0 ]
	then
		echo -e "[${GR}+${NC}] Install Successfull"
	else
		echo -e "[${BRed}-${NC}] Some error was encountered while Installing iptables-persistent"
		echo -e "\n[${GR}+${NC}] Please check the Log File for more Info"
		exit
	fi
fi



echo 
if [ "${UID}" -ne 0 ]
then
	echo -e "[${RED}*${NC}]Please Run the Script as Root..\n"
	exit 
fi

echo -e "\nwizard (v${RED}1.1${NC}) starting...\n"

Simple_firewall() {
	clear
	echo -e "\n\n\n[${RED}#${NC}]Simple Firewall--SF1\n\n\n"
	echo -e "
	[${GR}+${NC}] Filter ${BRed}Incoming${NC} Traffic → 1
	[${GR}+${NC}] Filter ${BRed}Outgoing${NC} Traffic → 2
														\n"
	
	read -p "[*] Please choose the relevant option: " SF_ASK
	if [ "${SF_ASK}" -eq "1" ]
	then
		echo -e "
		[${BGreen}+${NC}] FILTER INCOMING TRAFFIC

		[${GR}+${NC}] Filter ${BRed}ICMP${NC} Traffic → ICMP
		[${GR}+${NC}] Filter ${BRed}SSH${NC} Traffic → SSH
		[${GR}+${NC}] Filter ${BRed}HTTP${NC} Traffic → HTTP
		[${GR}+${NC}] Filter ${BRed}HTTPS${NC} Traffic → HTTPS
		[${GR}+${NC}] Filter ${BRed}FTP${NC} Traffic → FTP
		\n"
		read -p "[*] Enter the service or services to Filter::Seprate by spaces if needed: " Services
		read -p "[*] Please add allowed IPs or Networks::CIDR-Notaion:: If Any:Seprate by spaces: " Allowed_IPs
		for service in $Services
		do
			echo "[$(date)] Selected ${service} for filtering" >> wizard.log
			case "$service" in 
				ICMP | icmp)
					for IP in $Allowed_IPs
					do
						echo -n "Filtering Incoming ICMP"
						iptables -t filter -A INPUT -p icmp -s ${IP} -j ACCEPT
						if [ "${?}" -eq 0 ]
						then
							echo -e "\nICMP Filtering Done..."
						fi
					done
					iptables -t filter -A INPUT -p icmp -j DROP
					;;
				SSH | ssh)
					for IP in $Allowed_IPs
					do
						echo -n "Filtering Incoming SSH"
						iptables -t filter -A INPUT -p tcp --dport 22 -s ${IP} -j ACCEPT
						if [ "${?}" -eq 0 ]
						then
							echo -e "\nSSH Filtering Done..."
						fi
					done
					iptables -t filter -A INPUT -p tcp --dport 22 -j DROP
					;;
				HTTP | http)
					for IP in $Allowed_IPs
					do
						echo -n "Filtering Incoming HTTP"
						iptables -t filter -A INPUT -p tcp --dport 80 -s ${IP} -j ACCEPT
						if [ "${?}" -eq 0 ]
						then
							echo -e "\nHTTP Filtering Done..."
						fi
					done
					iptables -t filter -A INPUT -p tcp --dport 80 -j DROP
					;;
				HTTPS | https)
					for IP in $Allowed_IPs
					do
						echo -n "Filtering Incoming HTTPS"
						iptables -t filter -A INPUT -p tcp --dport 443 -s ${IP} -j ACCEPT
						if [ "${?}" -eq 0 ]
						then
							echo -e "\nHTTPS Filtering Done..."
						fi
					done
					iptables -t filter -A INPUT -p tcp --dport 443 -j DROP
					;;
				FTP | ftp)
					for IP in $Allowed_IPs
					do
						echo -n "Filtering Incoming FTP"
						iptables -t filter -A INPUT -p tcp --dport 21 -s ${IP} -j ACCEPT
						if [ "${?}" -eq 0 ]
						then
							echo -e "\nFTP Filtering Done..."
						fi
					done
					iptables -t filter -A INPUT -p tcp --dport 21 -j DROP
					;;
					*)
						echo "[$(date)] Unknown option specified" >> wizard.log
						echo "Error while parsing  your selection"
						echo -e "Please ${BRed}check the Log File${NC} For more Info"
						exit
			esac
		done
		if [ "$persist" -eq True ]
		then
			sleep 2
			echo -e "\n[${GR}+${NC}] Saving Firewall rules\n"
			iptables-save > /etc/iptables/rules.v4
		fi
	elif [ "${SF_ASK}" -eq "2" ]
	then
		echo -e "
		${BGreen}+${NC}] FILTER OUTGOING TRAFFIC

		[${GR}+${NC}] Filter ${BRed}ICMP${NC} Traffic → ICMP
		[${GR}+${NC}] Filter ${BRed}SSH${NC} Traffic → SSH
		[${GR}+${NC}] Filter ${BRed}HTTP${NC} Traffic → HTTP
		[${GR}+${NC}] Filter ${BRed}HTTPS${NC} Traffic → HTTPS
		[${GR}+${NC}] Filter ${BRed}FTP${NC} Traffic → FTP
		\n"
		read -p "[*] Enter the service or services to Filter::Seprate by spaces if needed: " Services
		read -p "[*] Please add allowed IPs or Networks::CIDR-Notaion:: If Any:Seprate by spaces: " Allowed_IPs
		for service in $Services
		do
			echo "[$(date)] Selected ${service} for filtering" >> wizard.log
			case "$service" in 
				ICMP | icmp)
					for IP in $Allowed_IPs
					do
						echo -n "Filtering Outgoing ICMP"
						iptables -t filter -A OUTPUT -p icmp -d ${IP} -j ACCEPT
						if [ "${?}" -eq 0 ]
						then
							echo -e "\nICMP Filtering Done..."
						fi
					done
					iptables -t filter -A OUTPUT -p icmp -j DROP
					;;
				SSH | ssh)
					for IP in $Allowed_IPs
					do
						echo -n "Filtering Outgoing SSH"
						iptables -t filter -A OUTPUT -p tcp --dport 22 -d ${IP} -j ACCEPT
						if [ "${?}" -eq 0 ]
						then
							echo -e "\nSSH Filtering Done..."
						fi
					done
					iptables -t filter -A OUTPUT -p tcp --dport 22 -j DROP
					;;
				HTTP | http)
					for IP in $Allowed_IPs
					do
						echo -n "Filtering Outgoing HTTP"
						iptables -t filter -A OUTPUT -p tcp --dport 80 -d ${IP} -j ACCEPT
						if [ "${?}" -eq 0 ]
						then
							echo -e "\nHTTP Filtering Done..."
						fi
					done
					iptables -t filter -A OUTPUT -p tcp --dport 80 -j DROP
					;;
				HTTPS | https)
					for IP in $Allowed_IPs
					do
						echo -n "Filtering Outgoing HTTPS"
						iptables -t filter -A OUTPUT -p tcp --dport 443 -d ${IP} -j ACCEPT
						if [ "${?}" -eq 0 ]
						then
							echo -e "\nHTTPS Filtering Done..."
						fi
					done
					iptables -t filter -A INPUT -p tcp --dport 443 -j DROP
					;;
				FTP | ftp)
					for IP in $Allowed_IPs
					do
						echo -n "Filtering Incoming FTP"
						iptables -t filter -A INPUT -p tcp --dport 21 -d ${IP} -j ACCEPT
						if [ "${?}" -eq 0 ]
						then
							echo -e "\nFTP Filtering Done..."
						fi
					done
					iptables -t filter -A INPUT -p tcp --dport 21 -j DROP
					;;
					*)
						echo "[$(date)] Unknown option specified" >> wizard.log
						echo "Error while parsing  your selection"
						echo -e "Please ${BRed}check the Log File${NC} For more Info"
						exit
			esac
		done
		if [ "$persist" -eq True ]
		then
			sleep 2
			echo -e "\n[${GR}+${NC}] Saving Firewall rules\n"
			iptables-save > /etc/iptables/rules.v4
		fi
	fi
}

Advanced_firewall() {
	clear
	echo -e "\n\n\n[${RED}#${NC}]Advanced Firewall--AD1\n\n\n"
	
	echo -e "[${GR}+${NC}] ${BRed}WizardBlock${NC}::(Contains a series of Best suited Custom Predefined Rules) → 1"
	echo -e "[${GR}+${NC}] ${BRed}MassBlock${NC}::(Blocks IP's from a text file containing List of IP's) → 2"
	echo -e "[${GR}+${NC}] ${BRed}Aggressive Block${NC}::(Blocks IP's By sending a Reject Message Back) → 3"
	echo -e "[${GR}+${NC}] ${BRed}Mac-Block${NC}::(Accepts/Rejects traffic from only selected Mac addresses) → 4"
	echo -e "[${GR}+${NC}] ${BRed}NAT${NC}::(Network Address Translation to the internet) → 5"
	echo -e "[${GR}+${NC}] ${BRed}DNAT${NC}::(Forwarding Incoming Requests From Internet To Local LAN::suitable if your machine is directly connected to internet) → 6"
	echo -e "[${GR}+${NC}] ${BRed}CountryBlock${NC}:::(Choose to Get a List of countries to Block or Accept) → 7"
	echo -e "[${GR}+${NC}] ${BRed}InterFace-Block${NC}:::(Block Traffic from interfaces/interface) → 8"
	echo -e "[${GR}+${NC}] ${BRed}Log--and--Drop${NC}:::(Log and Drop Incoming Traffic) → 9"
	echo -e "[${GR}+${NC}] ${BRed}CleanBlock${NC}:::(Drops all packets with invalid connection state) → 9"
	echo -e "[${GR}+${NC}] ${BRed}DOS-Protection${NC}:::(Offers A Great Number of options to Protect Server from Denial of Service Attacks) → 10"
	echo -e "[${GR}+${NC}] ${BRed}Traffic-mirroring${NC}:::(Mirror the same Traffic to Another Host)"
	echo -e "[${GR}+${NC}] ${BRed}Time/Day-Based${NC}:::(Run Firewall in a Bound-Time of some hours or only on weekdays) → 11"
	echo -e "[${GR}+${NC}] ${BRed}Honey-pot${NC}:::(Runs a honeypot to detect and Block Malicious Traffic in real-time) → 12"
	echo
	read -p "[*] Please choose the relevant option/options::seprate by spaces if needed:→  " ADF_options
	for selection in ${ADF_options}
	do
		case "${selection}" in
			1)
			echo "[$(date)] Selected  WizardBlock by ${HOSTNAME}" >> wizard.log
			chmod +x Modules/wizard_block_ad1
			.//Modules/wizard_block_ad1
			;;

			2)
			echo "[$(date)] Selected MassBlock by ${HOSTNAME}" >> wizard.log
			chmod +x Modules/mass_block_ad1
			.//Modules/mass_block_ad1
			;;
			
			3)
			echo "[$(date)] Selected Aggressive Block by ${HOSTNAME}" >> wizard.log
			chmod +x Modules/aggr_block
			.//Modules/aggr_block
			;;

			4)
			echo "[$(date)] Mac-Block Selected by ${HOSTNAME}" >> wizard.log
			chmod +x Modules/mac_block_ad1
			.//Modules/mac_block_ad1
		esac
	done

}


sleep 2


echo " " >> wizard.log
echo "::: Wizard Initiated at $(date) :::" >>  wizard.log

echo -e "\n
[${GR}+${NC}] Simple ${RED}Firewall${NC} → 1
[${GR}+${NC}] Advanced ${RED}Firewall${NC} → 2
[${GR}+${NC}] ${BRed}Load${NC} Balancing → 3
\n
"
read -p "[*] Please choose your relevant Option: " ASK

sleep 1

if [ "${ASK}" -eq "1" ]
then
	echo "Simple Firewall Selected By ${HOSTNAME}" >> wizard.log
	notify-send "Initializing Simple Firewall For::${HOSTNAME}"
	logger "${0} Running::[SF--1]::Wizard--on/at--:$(date)::::Firwall Framework For Linux By SxNade::https://github.com/SxNade"
	Simple_firewall
elif [ "${ASK}" -eq "2" ]
then
	echo "Advanced Firewall Selected By ${HOSTNAME}" >> wizard.log
	notify-send "Initializing Advanced Firewall For::${HOSTNAME}"
	logger "${0} Running::[SF--2]::Wizard--on/at--:$(date)::::Firwall Framework For Linux By SxNade::https://github.com/SxNade"
	Advanced_firewall
fi


